- [ ] Learning Git New
-ask for help:
    git config -h   OR
    git help config
-set default branch:
    git config --global init.defaul branch main
-chage directory:
    cd Desktop
-Initialize a repository:
    git init

- [ ] Git Evnvironments:
1. Working file Environment - your working files where you can make edits to files.
2. Staging Environment - like a holding pan where you temporarily keep things until you are ready to commit them
3. Commit Environment - where you commit things

- [ ] Debugging commands:
-check repository status:
    git status
- compare changes in your code and see what's been modified:
    git diff
    Note - "git diff" is a Git command that helps you see the differences between different versions of your files. It shows what has changed in the code since the last commit, making it easier to track edits, additions, and deletions.
    A). Unstaged Changes: When you make changes to files in your repository, they are first considered "unstaged" (i.e., they are not yet added to the staging area to be committed).
    Running "git diff" without any arguments shows the differences between your working directory (your current code) and the staging area (what you’ve marked for the next commit).
    In simpler terms, it shows what you've changed but haven’t yet prepared for committing with git add.
    B). Staged Changes: If you want to see changes that are already staged for your next commit (after using git add), you can run: "git diff --staged".
    C). Comparing Commits: You can also use git diff to compare different commits or branches. For example: "git diff HEAD~1 HEAD"
    Advantages of using "git diff" - It helps you review changes before committing them. It also makes it easier to catch mistakes or unexpected changes. Finally, It allows you to better understand and explain what modifications were made in your codebase.

- [ ] Staging & Unstaging in Git:
    -What is Staging in Git?
    Staging is like preparing your changes before officially recording them with a commit. It’s similar to adding items to a checklist that you want to keep track of before moving to the next step.
    When you make changes to files in a Git repository (e.g., add, edit, or delete a file), these changes start off as unstaged changes.
    To move changes into the staging area, you use the git add command. This tells Git, "I’m ready to keep track of these changes for my next snapshot (commit)."
    Example - Imagine you have modified a file called index.html. To stage this change, you would run: "git add index.html".
    Now, the changes to index.html are staged. This means they are ready to be saved in your next commit.
    -What is Unstaging in Git?
    Unstaging is the process of removing changes from the staging area, essentially saying, "I’m not ready to commit these changes just yet." The changes themselves are still in your working directory but are no longer marked to be included in the next commit.
    To unstage changes, you can use the git restore --staged command or git reset (though there are some important differences between these two).
    Example - If you’ve staged changes to index.html but decide you don’t want to commit them yet, you can unstage them with: "git restore --staged index.html"
    This puts the changes back into an unstaged state, meaning they will no longer be included in your next commit.
    -Why is Staging Useful?
a. Selective commits: Staging allows you to select specific changes to include in a commit while leaving other changes out. This helps keep your commits focused and meaningful.
b. Review changes: Before committing, you can double-check and review what you’ve staged using git status or git diff --staged.
c. Control over commits: Staging helps you control what gets committed, which is useful for breaking down complex changes into smaller, more understandable pieces.
    -Workflow Summary?
a. Make changes: Edit or create files in your project.
b. Stage changes: Use git add <filename> or git add . (to stage all changes) to move changes to the staging area.
c. Commit changes: Use git commit -m "Your commit message" to record the changes from the staging area into your repository’s history.
d. Unstage changes (if needed): If you change your mind, use "git restore --staged <filename>" or "git reset <filename>" to remove changes from the staging area back into your working file environment.

- [ ] TRACK FILES:
-track file:
    git add index.html
-untrack file:
    git rm --cached index.html
-track all files:
    git add --all  OR
    git add .        OR
    git add -a

- [ ] COMMIT FILES:
   The Commit structure -
    git commit -m "first commit"
 -Remove File 
    git rm <filename>
 -Restore Deleted File:
    git restore <filename>
 -Rename a File:
     git mv "Logo.png"  "Primary logo"
     git commit -m "changed the file name of an image"
  -Review All your Commits:
    a. git log: display your logs
    b. git log oneline: display your logs in oneline log
    c. git log -p: see what changed specifically in your file
    d. git help log
  -Amend Commit
    git commit -m "changed file name of an image" --amend
  -Go back to previous commit:
    git log --oneline
    git reset <commit id>
  -Modify history and order of commits appearance:
    git log --oneline
    git rebase -i --root
    type this exit rebase: ":x"

  - [ ] GIT BRANCH
    In Git, a branch is a new/separate version of the main repository.
Let's say you have a large project, and you need to update the design on it. Branches allow you to work on different parts of a project without impacting the main branch.  When the work is complete, a branch can be merged with the main project.
    You can even switch between branches and work on different projects without them interfering with each other.
    Example - 
    *With a new branch called new-design, edit the code directly without impacting the main branch
    *EMERGENCY! There is an unrelated error somewhere else in the project that needs to be fixed ASAP!
    *Create a new branch from the main project called small-error-fix
    *Fix the unrelated error and merge the small-error-fix branch with the main branch
    *You go back to the new-design branch, and finish the work there
Merge the new-design branch with main (getting alerted to the small error fix that you were missing).
    Example -
    We are already working in our local repository, and we do not want to disturb or possibly wreck the main project.
-New Git Branch:
a. Create a new branch:
     git branch hello-world-images
b. Let's confirm that we have created a new branch:
     git branch
c. Checkout into a new Branch:
    #"checkout" is the command used to check out a branch. Moving us from the current branch, to the one we specified at the end of the command.
      git checkout hello-world-images
d. Make changes to one of your files
        Note - Now we have moved our current workspace from the "master branch", to the "new branch". So open your favourite editor and make some changes.
    For this example, we added an image (img_hello_world.png) to the working folder and a line of code in the index.html file.
    We have "made changes to a file" and "added a new file" in the working directory (same directory as the main branch).
e. Now check the status of the current branch:
    git status
f. add unstaged file to staging environment
        git add --all or git add .
    #So let's go through what happens here:
    There are changes to our index.html, but the file is not staged for commit
img_hello_world.jpg is not tracked. So we need to add both files to the Staging Environment for this branch using: git add --all
g. check status: git status
h. commit changes to branch
    git commit -m "Added image to Hello World"
    #Now we have a new branch, that is different from the master branch.
i. check status: git status
-Switching Between Branches:
    We are currently on the branch "hello-world-images". We added an image to this branch, so let's list the files in the current directory:
    a. change branch to master:
        git checkout master
    b. ls
    d. git branch
 -Emergency Branch:
    Now imagine that we are not yet done with the branch "hello-world-images", but we need to fix an error on "master" branch. I don't want to mess with master branch directly, and I do not want to mess with hello-world-images branch, since it is not done yet.
    So we create a new branch to deal with the emergency:
        a. git checkout -b emergency-fix
        b. git branch
    Now we have created a new branch from master, and changed to it. We can safely fix the error without disturbing the other branches.

- [ ] GIT MERGE BRANCHES:
    -Merge Branches:
We have the "emergency fix" branch ready, and so let's merge the "master" and "emergency-fix" branches together.
    a. First, we need to change to the master branch:
        git checkout master
    b. Now we merge the current branch (master) with emergency-fix:
        git merge emergency-fix
        Note - Since the emergency-fix branch came directly from master, and no other changes had been made to master while we were working, Git sees this as a continuation of master. So it can "Fast-forward", just pointing both master and emergency-fix to the same commit.
    c. delete the emergency-fix branch, as it is no longer needed:
        git branch -d emergency-fix

 -Merge Conflict:
    Now we can move over to hello-world-images branch and keep working. Add another image file (img_hello_git.jpg) and change index.html, so it shows it:
    a. git checkout hello-world-images
    b. edit index.html
    c. stage and commit for this branch
        git add --all
        git commit -m "added new image"
     #We see that index.html has been changed in both branches. Now we are ready to merge hello-world-images into master. But what will happen to the changes we recently made in master?
     d. git checkout master
     e. git merge hello-world-images
    NOte - The merge failed, as there is conflict between the versions for index.html. Let us check the status:
    f. git status
    NOte - This confirms there is a conflict in index.html, but the image files are ready and staged to be committed. So we need to fix that conflict. 
    g. Open the file in your vscode editor and delete the text you dont want.
    h. Now we can stage index.html and check the status:
        a. git add index.html
        b. git status
    i. The conflict has been fixed, and we can use commit to conclude the merge:
        git commit -m "merged with hello-world-images after fixing conflicts"
    j. And delete the hello-world-images branch:
        git branch -d hello-world-images
    

- [ ] IGNORE FILES/FOLDERS: 
    A .gitignore file tells Git which files or directories to ignore (not track) in a project repository. This is useful because some files don't need to be shared with others or are unnecessary for version control (e.g., build files, node modules, sensitive environment configurations).
-create file:
    touch .gitignore - create 
-ignore:
    # ignore all .txt file  
        * .txt
    # ignore misc
        .DS_Store
        .env
        .env.local
        .env.development.local
        .env.test.local
        .env.production.local
    # ignore dependencies
        /node_modules
    # production build
        /build
    # logs
        npm-debug.log*
        yarn-debug.log*
        yarn-error.log*
   

